# Python Script to Train Naive Bayes and Export Model
# train_naive_bayes.py

import pandas as pd
import numpy as np
import json
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import re
import os

class BengaliNaiveBayesTrainer:
    def __init__(self):
        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words=None)
        self.classifier = MultinomialNB()
        self.bengali_stopwords = [
            'ржЖрж░', 'ржПрж░', 'ржпрзЗ', 'ржпрж╛', 'рждрж╛', 'ржПржЗ', 'ржУ', 'рждрж╛рж░', 'ржХрж░рзЗ', 'рж╣ржпрж╝',
            'ржерзЗржХрзЗ', 'ржжрж┐ржпрж╝рзЗ', 'ржирж╛', 'ржирзЗржЗ', 'ржЖржЫрзЗ', 'ржХрж░рж╛', 'рж╣рж▓', 'рж╣ржмрзЗ', 'ржЫрж┐рж▓',
            'ржПржХржЯрж┐', 'рж╕рзЗ', 'рждрж┐ржирж┐', 'ржЖржорж┐', 'ржЖржорж░рж╛', 'рждрж╛рж░рж╛', 'ржХрж┐', 'ржХрзЗржи', 'ржХрзАржнрж╛ржмрзЗ'
        ]
    
    def preprocess_text(self, text):
        """Basic Bengali text preprocessing"""
        if pd.isna(text):
            return ""
        
        # Convert to string and lowercase
        text = str(text).lower().strip()
        
        # Remove punctuation but keep Bengali characters
        text = re.sub(r'[ред,\.\?\!\;\:\"\'\(\)\[\]{}]', ' ', text)
        
        # Remove extra whitespace
        text = re.sub(r'\s+', ' ', text)
        
        # Remove numbers
        text = re.sub(r'[0-9]+', '', text)
        
        return text.strip()
    
    def load_and_prepare_data(self, csv_path):
        """Load CSV data and prepare for training"""
        print(f"ЁЯУБ Loading data from {csv_path}")
        
        # Try different CSV structures
        try:
            df = pd.read_csv(csv_path)
            print(f"тЬЕ Loaded {len(df)} rows")
            print(f"ЁЯУК Columns: {list(df.columns)}")
            
            # Detect text and label columns
            text_col = None
            label_col = None
            
            for col in df.columns:
                if 'text' in col.lower() or 'content' in col.lower() or 'news' in col.lower():
                    text_col = col
                if 'label' in col.lower() or 'class' in col.lower() or 'category' in col.lower():
                    label_col = col
            
            # If not found, use first two columns
            if text_col is None:
                text_col = df.columns[0]
                print(f"тЪая╕П Using first column as text: {text_col}")
            
            if label_col is None:
                label_col = df.columns[1]
                print(f"тЪая╕П Using second column as label: {label_col}")
            
            # Extract and preprocess
            texts = df[text_col].apply(self.preprocess_text)
            labels = df[label_col].apply(self.normalize_label)
            
            # Remove empty texts
            valid_idx = texts.str.len() > 0
            texts = texts[valid_idx]
            labels = labels[valid_idx]
            
            print(f"ЁЯУЭ Final dataset: {len(texts)} valid examples")
            print(f"ЁЯП╖я╕П Label distribution: {labels.value_counts().to_dict()}")
            
            return texts.tolist(), labels.tolist()
            
        except Exception as e:
            print(f"тЭМ Error loading CSV: {e}")
            return self.create_sample_data()
    
    def normalize_label(self, label):
        """Normalize different label formats"""
        if pd.isna(label):
            return 'neutral'
            
        label_str = str(label).lower().strip()
        
        # Rumor/Fake indicators
        if any(word in label_str for word in ['fake', 'false', 'rumor', 'rumour', 'misinformation', '0', 'ржнрзБржпрж╝рж╛', 'ржорж┐ржерзНржпрж╛', 'ржЧрзБржЬржм']):
            return 'rumor'
        
        # Credible/Real indicators  
        if any(word in label_str for word in ['real', 'true', 'authentic', '1', 'рж╕рждрзНржп', 'рж╕ржарж┐ржХ', 'ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп']):
            return 'credible'
        
        return 'neutral'
    
    def create_sample_data(self):
        """Create sample Bengali data if CSV loading fails"""
        print("ЁЯФД Creating sample training data...")
        
        rumor_texts = [
            'рж╢рзЛржирж╛ ржпрж╛ржЪрзНржЫрзЗ ржпрзЗ рж╕рж░ржХрж╛рж░ ржЧрзЛржкржирзЗ ржирждрзБржи ржХрж░ ржмрж╕рж╛рждрзЗ ржЪрж╛ржЗржЫрзЗ',
            'ржЧрзБржЬржм рж░ржЯрзЗржЫрзЗ ржпрзЗ ржЖржЧрж╛ржорзАржХрж╛рж▓ рж╕ржм ржжрзЛржХрж╛ржи ржмржирзНржз ржерж╛ржХржмрзЗ',
            'ржжрж╛ржмрж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржпрзЗ ржЦрж╛ржмрж╛рж░рзЗ ржмрж┐рж╖ ржорзЗрж╢рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ',
            'рж╕ржирзНржжрзЗрж╣ржЬржиржХ рждржерзНржп ржкрзЗржпрж╝рзЗржЫрж┐ ржпрзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржмрж╛рждрж┐рж▓ рж╣ржмрзЗ',
            'ржЪрж╛ржЮрзНржЪрж▓рзНржпржХрж░ ржЦржмрж░ ржпрзЗ ржмржирзНржпрж╛ ржЖрж░рзЛ ржмрж╛ржбрж╝ржмрзЗ',
            'ржЕржирж┐рж╢рзНржЪрж┐ржд ржЦржмрж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржЪрзНржЫрзЗ ржпрзЗ ржжрж╛ржо ржЖрж░рзЛ ржмрж╛ржбрж╝ржмрзЗ',
            'ржнрзБржпрж╝рж╛ ржЦржмрж░ ржЫржбрж╝рж╛ржирзЛ рж╣ржЪрзНржЫрзЗ ржХрж░рзЛржирж╛ ржЖржмрж╛рж░ ржмрж╛ржбрж╝ржЫрзЗ',
            'ржорж┐ржерзНржпрж╛ ржжрж╛ржмрж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ рж╕ржХрж▓ рж╕рзНржХрзБрж▓ ржмржирзНржз',
            'ржмрж╛ржирзЛржпрж╝рж╛ржЯ рждржерзНржп ржжрж┐ржпрж╝рзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ ржЕрж░рзНржержирзАрждрж┐ ржнрзЗржЩрзЗ ржкржбрж╝ржмрзЗ',
            'ржЬрж╛рж▓ ржирж┐ржЙржЬ ржЫржбрж╝рж╛ржЪрзНржЫрзЗ рж╕рж░ржХрж╛рж░ ржкржжрждрзНржпрж╛ржЧ ржХрж░ржмрзЗ'
        ]
        
        credible_texts = [
            'рж╕рж░ржХрж╛рж░рж┐ ржШрзЛрж╖ржгрж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржирждрзБржи ржирзАрждрж┐ржорж╛рж▓рж╛ ржкрзНрж░ржХрж╛рж╢рж┐ржд',
            'ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ рж╕рзВрждрзНрж░рзЗ ржЬрж╛ржирж╛ ржЧрзЗржЫрзЗ ржирж┐рж░рзНржмрж╛ржЪржирзЗрж░ рждрж╛рж░рж┐ржЦ ржарж┐ржХ',
            'ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп рж╕рзВрждрзНрж░рзЗ ржирж┐рж╢рзНржЪрж┐ржд рж╣ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ ржмрж╛ржЬрзЗржЯ ржкрж╛рж╕',
            'ржмрж┐рж╢рзЗрж╖ржЬрзНржЮржжрзЗрж░ ржорждрзЗ ржЕрж░рзНржержирзИрждрж┐ржХ ржЕржмрж╕рзНржерж╛ ржЙржирзНржирждрж┐',
            'ржЧржмрзЗрж╖ржгрж╛ржпрж╝ ржкрзНрж░ржорж╛ржгрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ рж╢рж┐ржХрзНрж╖рж╛рж░ ржорж╛ржи ржмрж╛ржбрж╝ржЫрзЗ',
            'ржпрж╛ржЪрж╛ржЗржХрзГржд рждржерзНржп ржЕржирзБржпрж╛ржпрж╝рзА рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржЙржирзНржиржд',
            'рж╕рждрзНржпрж╛ржпрж╝рж┐ржд рж░рж┐ржкрзЛрж░рзНржЯрзЗ ржмрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржкрж░рж┐ржмрзЗрж╢ рж░ржХрзНрж╖рж╛',
            'ржкрзНрж░ржорж╛ржгрж┐ржд рждржерзНржп ржорждрзЗ ржХрзГрж╖рж┐ ржЙрзОржкрж╛ржжржи ржмрзЗржбрж╝рзЗржЫрзЗ',
            'ржирж┐рж╢рзНржЪрж┐ржд рж╕рзВрждрзНрж░рзЗ ржЬрж╛ржирж╛ ржпрж╛ржпрж╝ рж╢рж┐рж▓рзНржк ржЦрж╛рждрзЗ ржЙржирзНржирждрж┐',
            'ржмрж┐рж╢рзНржмрж╕рзНржд рж╕ржВрж╕рзНржерж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯ ржЕржирзБржпрж╛ржпрж╝рзА ржжрзБрж░рзНржирзАрждрж┐ ржХржорзЗржЫрзЗ'
        ]
        
        neutral_texts = [
            'ржЖржЬржХрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж░рж┐ржкрзЛрж░рзНржЯ ржЕржирзБржпрж╛ржпрж╝рзА ржмрзГрж╖рзНржЯрж┐ рж╣рждрзЗ ржкрж╛рж░рзЗ',
            'рж╕рзНржкрзЛрж░рзНржЯрж╕ ржирж┐ржЙржЬрзЗ ржмрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржЯрзБрж░рзНржирж╛ржорзЗржирзНржЯ рж╢рзБрж░рзБ рж╣ржмрзЗ',
            'ржмрж┐ржирзЛржжржи ржЬржЧрждрзЗрж░ ржЦржмрж░рзЗ ржирждрзБржи ржЫржмрж┐ ржорзБржХрзНрждрж┐ ржкрж╛ржмрзЗ',
            'ржкрзНрж░ржпрзБржХрзНрждрж┐ ржмрж┐рж╖ржпрж╝ржХ рж╕ржВржмрж╛ржжрзЗ ржирждрзБржи ржЕрзНржпрж╛ржк рж▓ржЮрзНржЪ',
            'рж╢рж┐ржХрзНрж╖рж╛ рж╕ржВржХрзНрж░рж╛ржирзНржд ржЦржмрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛рж░ рж░рзБржЯрж┐ржи ржкрзНрж░ржХрж╛рж╢рж┐ржд',
            'рж╕рзНржмрж╛рж╕рзНржерзНржп ржЯрж┐ржкрж╕рзЗ ржмрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо',
            'ржнрзНрж░ржоржг ржЧрж╛ржЗржбрзЗ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржирждрзБржи рж╕рзНржерж╛ржи',
            'рж░рж╛ржирзНржирж╛рж░ рж░рзЗрж╕рж┐ржкрж┐рждрзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЦрж╛ржмрж╛рж░',
            'ржлрзНржпрж╛рж╢ржи ржирж┐ржЙржЬрзЗ ржмрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржирждрзБржи ржЯрзНрж░рзЗржирзНржб',
            'рж▓рж╛ржЗржлрж╕рзНржЯрж╛ржЗрж▓ ржЯрж┐ржкрж╕рзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржЬрзАржмржиржпрж╛рждрзНрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢'
        ]
        
        texts = rumor_texts + credible_texts + neutral_texts
        labels = ['rumor'] * len(rumor_texts) + ['credible'] * len(credible_texts) + ['neutral'] * len(neutral_texts)
        
        return texts, labels
    
    def train_model(self, texts, labels):
        """Train the Naive Bayes model"""
        print("ЁЯдЦ Training Naive Bayes model...")
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            texts, labels, test_size=0.2, random_state=42, stratify=labels
        )
        
        # Vectorize text
        X_train_vec = self.vectorizer.fit_transform(X_train)
        X_test_vec = self.vectorizer.transform(X_test)
        
        # Train classifier
        self.classifier.fit(X_train_vec, y_train)
        
        # Evaluate
        y_pred = self.classifier.predict(X_test_vec)
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"тЬЕ Training completed!")
        print(f"ЁЯУК Accuracy: {accuracy:.2%}")
        print(f"ЁЯУИ Classification Report:")
        print(classification_report(y_test, y_pred))
        
        return accuracy
    

    
    
    def export_model_for_flutter(self, output_path='flutter_naive_bayes_model.json'):
        """Export model parameters for Flutter"""
        print(f"ЁЯТ╛ Exporting model to {output_path}")
        folder = os.path.dirname(output_path)
        if folder and not os.path.exists(folder):
             
             os.makedirs(folder)
        
        # Get feature names and their indices
        feature_names = self.vectorizer.get_feature_names_out().tolist()
        vocabulary = {k: int(v) for k, v in self.vectorizer.vocabulary_.items()}
        
        # Get class information
        classes = self.classifier.classes_.tolist()
        class_log_prior = self.classifier.class_log_prior_.tolist()
        feature_log_prob = self.classifier.feature_log_prob_.tolist()
        
        # Create model export
        model_data = {
            'model_type': 'MultinomialNB',
            'classes': classes,
            'class_log_prior': class_log_prior,
            'feature_log_prob': feature_log_prob,
            'vocabulary': vocabulary,
            'feature_names': feature_names,
            'vectorizer_params': {
                'max_features': 1000,
                'min_df': 1,
                'max_df': 1.0
            },
            'metadata': {
                'training_samples': len(classes),
                'feature_count': len(feature_names),
                'bengali_stopwords': self.bengali_stopwords
            }
        }
        
        # Save to JSON
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(model_data, f, indent=2, ensure_ascii=False)
        
        print(f"тЬЕ Model exported successfully!")
        print(f"ЁЯУж Classes: {classes}")
        print(f"ЁЯФд Features: {len(feature_names)}")
        print(f"ЁЯУБ File size: {len(json.dumps(model_data))} characters")
        
        return model_data
    


def main():
    """Main training function"""
    print("ЁЯЪА Starting Bengali Naive Bayes Training...")
    
    trainer = BengaliNaiveBayesTrainer()
    
    # Load your CSV data (update path as needed)
    csv_path = r"C:\Users\Asus\Videos\Misinformation & Civic Sentiment Tracking\assets\data\bengali_fake_news.csv"

    texts, labels = trainer.load_and_prepare_data(csv_path)
    
    # Train model
    accuracy = trainer.train_model(texts, labels)
    
    # Export for Flutter
    model_data = trainer.export_model_for_flutter('assets/models/naive_bayes_model.json')
    
    print(f"ЁЯОЙ Training complete! Model ready for Flutter integration.")
    print(f"ЁЯУЛ Next steps:")
    print(f"   1. Copy 'assets/models/naive_bayes_model.json' to your Flutter project")
    print(f"   2. Add the JSON file to pubspec.yaml assets")
    print(f"   3. Use the Flutter inference code to load and run the model")

if __name__ == "__main__":
    main()